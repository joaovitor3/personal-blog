{"version":3,"sources":["components/BlogPostLayout.module.css","components/Pagination.module.css","utils/formats.js","components/ArticleMeta.js","components/ArticleMeta.module.css","components/BlogIndexPage.module.css","siteMetadata.js","components/Bio.js","components/Pagination.js","components/BlogIndexPage.js","components/NotFoundPage.js","components/LoadingIndicator.js","components/BlogLayout.js","components/BlogPostLayout.js","routes/posts/index.js","routes/index.js","components/LoadingIndicator.module.css","components/BlogLayout.module.css","components/ArticleSummary.js","components/ArticleSummary.module.css","components/Bio.module.css","utils/profile.jpg","serviceWorker.js","index.js"],"names":["module","exports","title","header","footer","bio","links","next","content","Pagination","previous","months","ArticleMeta","blogRoot","meta","readingTime","readingTimeElement","minutes","Math","max","round","cups","react_default","a","createElement","Fragment","className","styles","Array","fill","join","dateTime","date","toUTCString","dateString","Date","monthName","getMonth","dayOfMonth","getDate","fourDigitYear","getFullYear","concat","formatDate","tags","length","map","tag","key","es","href","articlesList","siteMetadata","author","description","indexPageSize","Bio","props","src","require","alt","pageCount","pageNumber","dist_es","String","pages","current","count","BlogIndexPage","postRoutes","components_Bio","route","url","ArticleSummary","components_Pagination","target","style","float","NotFoundPage","NotFound","LoadingIndicator","active","BlogLayout","isViewingIndex","loadingRoute","useLoadingRoute","container","components_LoadingIndicator","render","components_NotFoundPage","BlogPostLayout","_useCurrentRoute","useCurrentRoute","data","_useView","useView","connect","head","MDXComponent","pathname","esm","components","Link","wrapper","children","previousDetails","nextDetails","postModules","./2020-06-20-first-evaluation/post.js","__webpack_require__","e","then","bind","importPost","postPathnames","Object","keys","datePattern","postDetails","slug","slugify","replace","dateMatch","match","parseInt","posts","sortBy","reverse","i","getPage","Navi","asyncToGenerator","regenerator_default","mark","_callee2","_yield$importPost","post","getContent","previousSlug","previousPost","nextSlug","nextPost","previousPostDetails","nextPostDetails","wrap","_context2","prev","sent","default","objectWithoutProperties","abrupt","getData","req","context","objectSpread2","getView","_getView","_callee","_yield$getContent","other","_context","stop","apply","this","arguments","chunks","chunk","chunkPagePairs","_ref","pageTitle","method","Promise","all","_ref2","resolve","routes","_x3","view","components_BlogIndexPage","_x","_x2","compose","withContext","mountpath","withView","path","test","components_BlogLayout","mount","/","shift","/page","/1","redirect","fromPairs","/posts","components_BlogPostLayout","/tags","lazy","/about","/rss","LoadingIndicator-animation","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_navi__WEBPACK_IMPORTED_MODULE_1__","_ArticleMeta__WEBPACK_IMPORTED_MODULE_2__","_ArticleSummary_module_css__WEBPACK_IMPORTED_MODULE_3__","_ArticleSummary_module_css__WEBPACK_IMPORTED_MODULE_3___default","spoiler","p","Boolean","window","location","hostname","register","main","navigation","createBrowserNavigation","getRoute","process","renderer","ReactDOM","hydrate","react_navi_helmet_async_dist_es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d4fd822.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"BlogPostLayout_title__2L_2_\",\"header\":\"BlogPostLayout_header__1Ny4T\",\"footer\":\"BlogPostLayout_footer__3ofxa\",\"bio\":\"BlogPostLayout_bio__diNn9\",\"links\":\"BlogPostLayout_links__-LX2X\",\"next\":\"BlogPostLayout_next__KrMHx\",\"content\":\"BlogPostLayout_content__1mzTO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Pagination\":\"Pagination_Pagination__2Xt2h\",\"previous\":\"Pagination_previous__1akUm\",\"next\":\"Pagination_next__7Ba4Y\"};","export let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\nexport function formatDate(dateString) {\n  let date = new Date(dateString)\n  let monthName = months[date.getMonth()]\n  let dayOfMonth = date.getDate()\n  let fourDigitYear = date.getFullYear()\n\n  return `${monthName} ${dayOfMonth}, ${fourDigitYear}`\n}","import { join } from 'path'\nimport React from 'react'\nimport { Link } from 'react-navi'\nimport { formatDate } from '../utils/formats'\nimport styles from './ArticleMeta.module.css'\n\nfunction ArticleMeta({ blogRoot, meta, readingTime }) {\n  let readingTimeElement\n  if (readingTime) {\n    let minutes = Math.max(Math.round(readingTime.minutes), 1)\n    let cups = Math.round(minutes / 5);\n    readingTimeElement =\n      <React.Fragment>\n        {' '}&bull;{' '}\n        <span className={styles.readingTime}>\n          {new Array(cups || 1).fill('☕️').join('')} {minutes} min read\n        </span>\n      </React.Fragment>\n  }\n      \n  return (\n    <small className={styles.ArticleMeta}>\n      <time dateTime={meta.date.toUTCString()}>{formatDate(meta.date)}</time>\n      {\n        meta.tags &&\n        meta.tags.length &&\n        <>\n          {' '}&bull;{' '}\n          <ul className={styles.tags}>\n            {meta.tags.map(tag =>\n              <li key={tag}>\n                <Link href={join(blogRoot, 'tags', tag)}>{tag}</Link>\n              </li>\n            )}\n          </ul>\n        </>\n      }\n      {readingTimeElement || null}\n    </small>\n  )\n}\n\nexport default ArticleMeta","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tags\":\"ArticleMeta_tags__1IJ9w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"BlogIndexPage_title__341hM\",\"articlesList\":\"BlogIndexPage_articlesList__1V39R\",\"footer\":\"BlogIndexPage_footer__1vkZQ\"};","export default {\n  // The blog's title as it appears in the layout header, and in the document\n  // <title> tag.\n  title: \"João Vitor\",\n\n  author: \"João Vitor\",\n  description: \"My personal blog\",\n\n  // The number of posts to a page on the site index.\n  indexPageSize: 10,\n}\n","import React from 'react'\nimport styles from './Bio.module.css'\n\nfunction Bio(props) {\n  return (\n    <div className={`\n      ${styles.Bio}\n      ${props.className || ''}\n    `}>\n      <img src={require('../utils/profile.jpg')} alt=\"Me\" />\n      <p>\n        Software engineering student, at University of Brasília.\n        <br></br>\n        Brasília, Brazil\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import { join } from 'path'\nimport React from 'react'\nimport { Link } from 'react-navi'\nimport styles from './Pagination.module.css'\n\nfunction Pagination({ blogRoot, pageCount, pageNumber }) {\n  return (\n    <small className={styles.Pagination}>\n      {\n        pageNumber !== 1 &&\n        <Link\n          className={styles.previous}\n          href={join(blogRoot, 'page', String(pageNumber - 1))}>\n          ← Previous\n        </Link>\n      }\n      <span className={styles.pages}>\n        {' '}Page <span className={styles.current}>{pageNumber}</span>/<span className={styles.count}>{pageCount}</span>{' '}\n      </span>\n      {\n        pageNumber < pageCount &&\n        <Link\n          className={styles.next}\n          href={join(blogRoot, 'page', String(pageNumber + 1))}>\n          Next →\n        </Link>\n      }\n    </small>\n  )\n}\n\nexport default Pagination","import React from 'react'\nimport { Link } from 'react-navi'\nimport siteMetadata from '../siteMetadata'\nimport ArticleSummary from './ArticleSummary'\nimport Bio from './Bio'\nimport Pagination from './Pagination'\nimport styles from './BlogIndexPage.module.css'\n\nfunction BlogIndexPage({ blogRoot, pageCount, pageNumber, postRoutes }) {\n  return (\n    <div>\n      <header>\n        <h1 className={styles.title}>\n          <Link href={blogRoot}>{siteMetadata.title}</Link>\n        </h1>\n        <Bio />\n      </header>\n      <ul className={styles.articlesList}>\n        {postRoutes.map(route => (\n          <li key={route.url.href}>\n            <ArticleSummary blogRoot={blogRoot} route={route} />\n          </li>\n        ))}\n      </ul>\n      {pageCount > 1 && (\n        <Pagination\n          blogRoot={blogRoot}\n          pageCount={pageCount}\n          pageNumber={pageNumber}\n        />\n      )}\n      <footer className={styles.footer}>\n        <div>\n          <Link href=\"https://github.com/joaovitor3\" target=\"_blank\">Github</Link> &bull; \n          <Link href=\"https://www.linkedin.com/in/jo%C3%A3o-vitor-r-souza/\" target=\"_blank\" >\n            LinkedIn\n          </Link>\n          <Link href=\"/tags\" style={{ float: 'right' }}\n            >Tags\n          </Link>{' '}\n        </div>\n      </footer>\n    </div>\n  )\n}\n\nexport default BlogIndexPage\n","import React from 'react'\nimport styles from './NotFoundPage.module.css'\n\n// Note that create-react-navi-app will always show an error screen when this\n// is rendered. This is because the underlying react-scripts package shows\n// the error screen when a NotFoundError is thrown, even though it's caught\n// by <NotFoundBoundary>. To see the error rendered by this function,\n// you'll just need to close the error overlay with the \"x\" at the top right.\nfunction NotFoundPage() {\n  return (\n    <div className={styles.NotFound}>\n      <h1>404 - Not Found</h1>\n    </div>\n  )\n}\n\nexport default NotFoundPage","import React from 'react'\nimport styles from './LoadingIndicator.module.css'\n\nfunction LoadingIndicator({ active, className, style }) {\n  return (\n    <div\n      className={`\n        ${styles.LoadingIndicator}\n        ${active ? styles.active : ''}\n        ${className}\n      `}\n      style={style}\n    />\n  )\n}\n\nexport default LoadingIndicator","import React from 'react'\nimport {\n  View,\n  Link,\n  NotFoundBoundary,\n  useLoadingRoute,\n} from 'react-navi'\nimport siteMetadata from '../siteMetadata'\nimport NotFoundPage from './NotFoundPage'\nimport LoadingIndicator from './LoadingIndicator'\nimport styles from './BlogLayout.module.css'\n\nfunction BlogLayout({ blogRoot, isViewingIndex }) {\n  let loadingRoute = useLoadingRoute()\n\n  return (\n    <div className={styles.container}>\n      <LoadingIndicator active={!!loadingRoute} />\n\n      {// Don't show the header on index pages, as it has a special header.\n      !isViewingIndex && (\n        <header>\n          <h3 className={styles.title}>\n            <Link href={blogRoot}>{siteMetadata.title}</Link>\n          </h3>\n        </header>\n      )}\n\n      <main>\n        <NotFoundBoundary render={() => <NotFoundPage />}>\n          <View />\n        </NotFoundBoundary>\n      </main>\n    </div>\n  )\n}\n\nexport default BlogLayout\n","import React from 'react'\nimport { Link, useCurrentRoute, useView } from 'react-navi'\nimport { MDXProvider } from '@mdx-js/react'\nimport siteMetadata from '../siteMetadata'\nimport ArticleMeta from './ArticleMeta'\nimport Bio from './Bio'\nimport styles from './BlogPostLayout.module.css'\n\nfunction BlogPostLayout({ blogRoot }) {\n  let { title, data, url } = useCurrentRoute()\n  let { connect, content, head } = useView()\n  let { MDXComponent, readingTime } = content\n\n  // The content for posts is an MDX component, so we'll need\n  // to use <MDXProvider> to ensure that links are rendered\n  // with <Link>, and thus use pushState.\n  return connect(\n    <>\n      {head}\n      <article className={styles.container}>\n        <header className={styles.header}>\n          <h1 className={styles.title}>\n            <Link href={url.pathname}>{title}</Link>\n          </h1>\n          <ArticleMeta\n            blogRoot={blogRoot}\n            meta={data}\n            readingTime={readingTime}\n          />\n        </header>\n        <MDXProvider components={{\n          a: Link,\n          wrapper: ({ children }) =>\n            <div className={styles.content}>\n              {children}\n            </div>\n        }}>\n          <MDXComponent />\n        </MDXProvider>\n        <footer className={styles.footer}>\n          <h3 className={styles.title}>\n            <Link href={blogRoot}>\n              {siteMetadata.title}\n            </Link>\n          </h3>\n          <Bio className={styles.bio} />\n          <section className={styles.links}>\n            {\n              data.previousDetails &&\n              <Link className={styles.previous} href={data.previousDetails.href}>\n                ← {data.previousDetails.title}\n              </Link>\n            }\n            {\n              data.nextDetails &&\n              <Link className={styles.next} href={data.nextDetails.href}>\n                {data.nextDetails.title} →\n              </Link>\n            }\n          </section>\n        </footer>\n      </article>\n    </>\n  )\n}\n\nexport default BlogPostLayout","import importAll from 'import-all.macro'\nimport * as Navi from 'navi'\nimport { join } from 'path'\nimport { sortBy } from 'lodash'\nimport slugify from 'slugify'\n\n// Get a list of all posts, that will not be loaded until the user\n// requests them.\nconst postModules = importAll.deferred('./**/post.js')\nconst importPost = pathname => postModules[pathname]()\nconst postPathnames = Object.keys(postModules)\nconst datePattern = /^((\\d{1,4})-(\\d{1,4})-(\\d{1,4}))[/-]/\n\nlet postDetails = postPathnames.map(pathname => {\n  let slug = slugify(\n    pathname.replace(/post.jsx?$/, '').replace(/(\\d)\\/(\\d)/, '$1-$2'),\n  )\n    .replace(/^[-.]+|[.-]+$/g, '')\n    .replace(datePattern, '$1/')\n\n  let date\n  let dateMatch = slug.match(datePattern)\n  if (dateMatch) {\n    date = new Date(dateMatch[2], parseInt(dateMatch[3]) - 1, dateMatch[4])\n  }\n\n  return {\n    slug,\n    pathname,\n    date,\n  }\n})\n\n// Sort the pages by slug (which contain the dates)\npostDetails = sortBy(postDetails, ['slug']).reverse()\n\n// Create url-friendly slugs from post pathnames, and a `getPage()` function\n// that can be used to load and return the post's Page object.\nlet posts = postDetails.map(({ slug, pathname, date }, i) => ({\n  getPage: Navi.map(async () => {\n    let { default: post } = await importPost(pathname)\n    let { title, getContent, ...meta } = post\n    let previousSlug, previousPost, nextSlug, nextPost\n\n    if (i !== 0) {\n      let previousPostDetails = postDetails[i - 1]\n      previousPost = (await importPost(previousPostDetails.pathname)).default\n      previousSlug = previousPostDetails.slug\n    }\n\n    if (i + 1 < postDetails.length) {\n      let nextPostDetails = postDetails[i + 1]\n      nextPost = (await importPost(nextPostDetails.pathname)).default\n      nextSlug = nextPostDetails.slug\n    }\n\n    return Navi.route({\n      title,\n      getData: (req, context) => ({\n        date,\n        pathname,\n        slug,\n        previousDetails: previousPost && {\n          title: previousPost.title,\n          href: join(context.blogRoot, 'posts', previousSlug),\n        },\n        nextDetails: nextPost && {\n          title: nextPost.title,\n          href: join(context.blogRoot, 'posts', nextSlug),\n        },\n        ...meta,\n      }),\n      getView: async () => {\n        let { default: MDXComponent, ...other } = await getContent()\n        return { MDXComponent, ...other }\n      },\n    })\n  }),\n  slug,\n}))\n\nexport default posts\n","import {\n  compose,\n  lazy,\n  map,\n  mount,\n  redirect,\n  resolve,\n  route,\n  withContext,\n  withView,\n} from 'navi'\nimport React from 'react'\nimport { join } from 'path'\nimport { chunk, fromPairs } from 'lodash'\nimport BlogIndexPage from '../components/BlogIndexPage'\nimport BlogLayout from '../components/BlogLayout'\nimport BlogPostLayout from '../components/BlogPostLayout'\nimport siteMetadata from '../siteMetadata'\nimport posts from './posts'\n\n// Split the posts into a list of chunks of the given size, and\n// then build index pages for each chunk.\nlet chunks = chunk(posts, siteMetadata.indexPageSize)\nlet chunkPagePairs = chunks.map((chunk, i) => [\n  '/' + (i + 1),\n  map(async (req, context) => {\n    // Don't load anything when just crawling\n    if (req.method === 'HEAD') {\n      return route()\n    }\n\n    // Get metadata for all pages on this page\n    let postRoutes = await Promise.all(\n      chunk.map(async post => {\n        let href = join(context.blogRoot, 'posts', post.slug)\n        return await resolve({\n          // If you want to show the page content on the index page, set\n          // this to 'GET' to be able to access it.\n          method: 'HEAD',\n          routes,\n          url: href,\n        })\n      }),\n    )\n\n    // Only add a page number to the page title after the first index page.\n    let pageTitle = siteMetadata.title\n    if (i > 0) {\n      pageTitle += ` – page ${i + 1}`\n    }\n\n    return route({\n      title: pageTitle,\n      view: (\n        <BlogIndexPage\n          blogRoot={context.blogRoot}\n          pageNumber={i + 1}\n          pageCount={chunks.length}\n          postRoutes={postRoutes}\n        />\n      ),\n    })\n  }),\n])\n\nconst routes = compose(\n  withContext((req, context) => ({\n    ...context,\n    blogRoot: req.mountpath || '/',\n  })),\n  withView((req, context) => {\n    // Check if the current page is an index page by comparing the remaining\n    // portion of the URL's pathname with the index page paths.\n    let isViewingIndex = req.path === '/' || /^\\/page\\/\\d+$/.test(req.path)\n\n    // Render the application-wide layout\n    return (\n      <BlogLayout blogRoot={context.blogRoot} isViewingIndex={isViewingIndex} />\n    )\n  }),\n  mount({\n    // The blog's index pages go here. The first index page is mapped to the\n    // root URL, with a redirect from \"/page/1\". Subsequent index pages are\n    // mapped to \"/page/n\".\n    '/': chunkPagePairs.shift()[1],\n    '/page': mount({\n      '/1': redirect((req, context) => context.blogRoot),\n      ...fromPairs(chunkPagePairs),\n    }),\n\n    // Put posts under \"/posts\", so that they can be wrapped with a\n    // \"<BlogPostLayout />\" that configures MDX and adds a post-specific layout.\n    '/posts': compose(\n      withView((req, context) => (\n        <BlogPostLayout blogRoot={context.blogRoot} />\n      )),\n      mount(fromPairs(posts.map(post => ['/' + post.slug, post.getPage]))),\n    ),\n\n    // Miscellaneous pages can be added directly to the root switch.\n    '/tags': lazy(() => import('./tags')),\n    '/about': lazy(() => import('./about')),\n\n    // Only the statically built copy of the RSS feed is intended to be opened,\n    // but the route is defined here so that the static renderer will pick it\n    // up.\n    '/rss': route(),\n  }),\n)\n\nexport default routes\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoadingIndicator\":\"LoadingIndicator_LoadingIndicator__3KSl0\",\"active\":\"LoadingIndicator_active__3EncM\",\"LoadingIndicator-animation\":\"LoadingIndicator_LoadingIndicator-animation__2icwd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BlogLayout_container__1fiRb\",\"title\":\"BlogLayout_title__3HyDU\"};","import React from 'react'\nimport { Link } from 'react-navi'\nimport ArticleMeta from './ArticleMeta'\nimport styles from './ArticleSummary.module.css'\n\nfunction ArticleSummary({ blogRoot, route }) {\n  return (\n    <article className={styles.ArticleSummary}>\n      <h2><Link href={route.url.href}>{route.title}</Link></h2>\n      <ArticleMeta blogRoot={blogRoot} meta={route.data} />\n      <p>{route.data.spoiler}</p>\n    </article>\n  )\n}\n\nexport default ArticleSummary","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ArticleSummary\":\"ArticleSummary_ArticleSummary__3I5Qk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Bio\":\"Bio_Bio__1ks_2\"};","module.exports = __webpack_public_path__ + \"static/media/profile.69b941f1.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import register from \"navi-scripts/register\";\nimport { createBrowserNavigation } from \"navi\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from \"react-navi\";\nimport HelmetProvider from \"react-navi-helmet-async\";\nimport \"./index.module.css\";\nimport routes from \"./routes\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// `register()` is responsible for exporting your app's pages and App\n// component to the static renderer, and for starting the app with the\n// `main()` function when running within a browser.\nregister({\n  // Specify the pages that navi-app should statically build, by passing in a\n  // Switch object.\n  routes,\n\n  // This will only be called when loading your app in the browser. It won't\n  // be called when performing static generation.\n  async main() {\n    let navigation = createBrowserNavigation({ routes });\n\n    // Wait until the navigation has loaded the page's content, or failed to do\n    // so. If you want to load other data in parallel while the initial page is\n    // loading, make sure to start loading before this line.\n    await navigation.getRoute();\n\n    // React requires that you call `ReactDOM.hydrate` if there is statically\n    // rendered content in the root element, but prefers us to call\n    // `ReactDOM.render` when it is empty.\n    let hasStaticContent = process.env.NODE_ENV === \"production\";\n    let renderer = hasStaticContent ? ReactDOM.hydrate : ReactDOM.render;\n\n    // Start react, passing in the current navigation state and\n    // rendering the top-level view.\n    renderer(\n      <HelmetProvider>\n        <Router navigation={navigation} />\n      </HelmetProvider>,\n      document.getElementById(\"root\")\n    )\n\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: http://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n  }\n});\n"],"sourceRoot":""}