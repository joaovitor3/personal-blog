{"version":3,"sources":["routes/posts/2020-06-20-first-evaluation/document.mdx"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_joao_Documents_gsoc_personal_blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","isMDXComponent","tableOfContents","level","title","children","frontMatter"],"mappings":"mSAGO,MAAMA,EAAc,CAACC,KAAO,aAAaC,QAAU,MAAMC,KAAO,OAAOC,MAAQ,KAShFC,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,qBADR,qBAGAL,OAAAE,EAAA,EAAAF,CAAA,6RAE2DA,OAAAE,EAAA,EAAAF,CAAA,WAF3D,+YAQAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,qBADR,qBAGAL,OAAAE,EAAA,EAAAF,CAAA,6QAEyDA,OAAAE,EAAA,EAAAF,CAAA,WAFzD,uXAOAA,OAAAE,EAAA,EAAAF,CAAA,UACDA,OAAAE,EAAA,EAAAF,CAAA,4DACAA,OAAAE,EAAA,EAAAF,CAAA,+FAxBM,wMA6BLA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,iBADR,iBAGAL,OAAAE,EAAA,EAAAF,CAAA,wbAIwDA,OAAAE,EAAA,EAAAF,CAAA,WAJxD,uSASAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,kBACbC,gBAAiB,SACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,82FAGhBX,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gBADR,gBAGAL,OAAAE,EAAA,EAAAF,CAAA,6XAIAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,kBACbC,gBAAiB,SACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,y/HAGhBX,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,kBADR,kBAGAL,OAAAE,EAAA,EAAAF,CAAA,keAKAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,cADR,cAGAL,OAAAE,EAAA,EAAAF,CAAA,kWAQJJ,EAAWgB,gBAAiB,EACrB,MAAMC,EAAkB,CAACf,EAAW,KAAO,CAChD,CACEO,GAAI,gBACJS,MAAO,EACPC,MAAO,gBACPC,SAAU,IAId,CACIX,GAAI,eACJS,MAAO,EACPC,MAAO,eACPC,SAAU,KAMDC,EAAc","file":"static/js/7.48973b39.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"4 min read\",\"minutes\":3.575,\"time\":214500,\"words\":715}\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"about-the-project\"\n    }}>{`About the project`}</h1>\n    <p>{` `}{` `}{` `}{` `}{`The OpenStreetMap (OSM) project has established formal  Organised Editing Guidelines,\nwhich require all groups and organized activities of mapping on OpenStreetMap to report\ntransparently how they organize and what they are mapping on.`}<br></br>{`\n`}{` `}{` `}{` `}{` `}{`The Tasking Manager is the most used application in the OSM ecosystem\nfor volunteers, but also professionals, to\nteam up and coordinate mapping. In order to ease up the user experience of fulfilling\nthe guidelines for organized editing, the goal of my project this summer is to make the\nprocess of reporting back data for OpenStreetMap automatically.`}</p>\n    <h1 {...{\n      \"id\": \"project-solutions\"\n    }}>{`Project solutions`}</h1>\n    <p>{` `}{` `}{` `}{` `}{`In the first step, we started with an analysis of contents and fields\nthat are required or suggested by the organized editing guidelines, then we check whether\nthese are already available in the Tasking Manager, or not.`}<br></br>{`\n`}{` `}{` `}{` `}{` `}{`Then we implemented a small proof of concept for testing out how\nthe communication between Tasking Manager and OpenStreetMap should occur. Although the OSM’s organized editing\nguidelines suggest the project wiki for reporting of organized mapping activities, we wanted to include\ntwo technical ideas for this initial test:`}</p>\n    <ul>\n   <li>Report data directly to the OpenStreetMap wiki</li>\n   <li>Store files in a human-readable format in a git repository (GitHub, Gitlab, etc)</li>\n    </ul> \n&ensp;&ensp;&ensp;&ensp;We would like to have a broader conversation about the \nbenefits of each approach and we are planning \nto reach out to OSM’s Data Working Group to ask for their feedback.\n    <h2 {...{\n      \"id\": \"wiki-solution\"\n    }}>{`Wiki solution`}</h2>\n    <p>{` `}{` `}{` `}{` `}{`To report data directly to the OpenStreetMap wiki, we adapted the solution\ncurrently used by OpenStreetMap to the requirements of the Tasking Manager,\nwhich was basically to adjust the existing pages on the OpenStreetMap wiki to a new format.\nThis was done using a python library called wikitextparser, which converts a string to\nwikitext (the file format used on the OpenStreetMap wiki).`}<br></br>{`\n`}{` `}{` `}{` `}{` `}{`For creating and editing the pages of a MediaWiki instance\n(OpenStreetMap, Wikipedia, and others are examples of MediaWiki instances) we\nused the MediaWiki API. Below is a very simple example of adding a table\nin a wiki page via the Mediawiki API.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\",\n        \"data-language\": \"python\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">import</span> requests\\n\\n<span class=\\\"token comment\\\"># Data of table to be added in the wiki page</span>\\ntable_data <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>\\n   <span class=\\\"token string\\\">\\\"{|class='wikitable sortable'\\\\n\\\"</span>\\n   <span class=\\\"token string\\\">\\\"|-\\\\n\\\"</span>\\n   <span class=\\\"token string\\\">'! scope=\\\"col\\\" | Name\\\\n'</span>\\n   <span class=\\\"token string\\\">'! scope=\\\"col\\\" | Link\\\\n'</span>\\n   <span class=\\\"token string\\\">\\\"|-\\\\n\\\"</span>\\n   <span class=\\\"token string\\\">\\\"| Covid 19\\\\n\\\"</span>\\n   <span class=\\\"token string\\\">\\\"| [[COVID19]]\\\\n\\\"</span>\\n   <span class=\\\"token string\\\">\\\"|-\\\\n\\\"</span>\\n   <span class=\\\"token string\\\">\\\"|}\\\\n\\\"</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n \\n<span class=\\\"token comment\\\"># params of request to create wiki page</span>\\nparams <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token string\\\">\\\"action\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"edit\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token string\\\">\\\"title\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"covid 19\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token string\\\">\\\"createonly\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"true\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token string\\\">\\\"contentmodel\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"wikitext\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token string\\\">\\\"bot\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"true\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token string\\\">\\\"format\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"json\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n \\n<span class=\\\"token comment\\\"># request to create wiki page</span>\\nsession <span class=\\\"token operator\\\">=</span> requests<span class=\\\"token punctuation\\\">.</span>Session<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nsession<span class=\\\"token punctuation\\\">.</span>post<span class=\\\"token punctuation\\\">(</span>\\n   url<span class=\\\"token operator\\\">=</span>WIKI_API_ENDPOINT<span class=\\\"token punctuation\\\">,</span>\\n   params<span class=\\\"token operator\\\">=</span>params<span class=\\\"token punctuation\\\">,</span>\\n   data<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>\\n       <span class=\\\"token string\\\">\\\"token\\\"</span><span class=\\\"token punctuation\\\">:</span> WIKI_API_TOKEN<span class=\\\"token punctuation\\\">,</span>\\n       <span class=\\\"token string\\\">\\\"text\\\"</span><span class=\\\"token punctuation\\\">:</span> table_data\\n   <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\"\n        }\n      }}></code></pre>\n    <h2 {...{\n      \"id\": \"git-solution\"\n    }}>{`Git solution`}</h2>\n    <p>{` `}{` `}{` `}{` `}{`To store files in a human-readable format, the python library\nYAML was used, which converts YAML to other native python formats and vice versa.\nTo save and edit the YAML files in a git repository, the GitHub API was used. Below\nis a code example that parses a python dictionary to a YAML file and saves it in a GitHub repository.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\",\n        \"data-language\": \"python\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">import</span> yaml\\n<span class=\\\"token keyword\\\">import</span> base64\\n<span class=\\\"token keyword\\\">import</span> requests\\n<span class=\\\"token keyword\\\">import</span> json\\n \\n<span class=\\\"token comment\\\"># Data of the yaml file to be saved in the repo</span>\\ndata <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token string\\\">\\\"project\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n       <span class=\\\"token string\\\">\\\"title\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Covid 19\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n \\n<span class=\\\"token comment\\\"># parse json to yaml encoded in base64</span>\\nyaml_file <span class=\\\"token operator\\\">=</span> yaml<span class=\\\"token punctuation\\\">.</span>dump<span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> allow_unicode<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">True</span><span class=\\\"token punctuation\\\">)</span>\\nencoded_yaml_file <span class=\\\"token operator\\\">=</span> base64<span class=\\\"token punctuation\\\">.</span>b64encode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">bytes</span><span class=\\\"token punctuation\\\">(</span>yaml_file<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n \\n<span class=\\\"token comment\\\"># request data in the format required by github API</span>\\nrequest_data <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token string\\\">\\\"committer\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n       <span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">:</span> GITHUB_COMMITER_NAME<span class=\\\"token punctuation\\\">,</span>\\n       <span class=\\\"token string\\\">\\\"email\\\"</span><span class=\\\"token punctuation\\\">:</span> GITHUB_COMMITER_EMAIL\\n   <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token string\\\">\\\"message\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Add project title\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token string\\\">\\\"content\\\"</span><span class=\\\"token punctuation\\\">:</span> encoded_yaml_file<span class=\\\"token punctuation\\\">.</span>decode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"utf-8\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n \\n<span class=\\\"token comment\\\"># create yaml file in the root of repo</span>\\nrequests<span class=\\\"token punctuation\\\">.</span>put<span class=\\\"token punctuation\\\">(</span>\\n   <span class=\\\"token string\\\">\\\"https://api.github.com/\\\"</span>\\n   <span class=\\\"token string-interpolation\\\"><span class=\\\"token string\\\">f\\\"repos/</span><span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span>GITHUB_REPOSITORY<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token string\\\">/contents/covid19_project.yaml\\\"</span></span><span class=\\\"token punctuation\\\">,</span>\\n   headers<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>\\n       <span class=\\\"token string\\\">\\\"Content-Type\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"application/json\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n       <span class=\\\"token string\\\">\\\"Authorization\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Bearer \\\"</span> <span class=\\\"token operator\\\">+</span> GITHUB_API_TOKEN\\n   <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n   data<span class=\\\"token operator\\\">=</span>json<span class=\\\"token punctuation\\\">.</span>dumps<span class=\\\"token punctuation\\\">(</span>request_data<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n\"\n        }\n      }}></code></pre>\n    <h1 {...{\n      \"id\": \"missing-fields\"\n    }}>{`Missing fields`}</h1>\n    <p>{` `}{` `}{` `}{` `}{`Also, it was necessary to add the required or suggested\nfields by the organized editing guidelines that were not included in the Tasking Manager.\nSome of these fields are just waiting for the Pull Request approval for being added to\nthe Tasking Manager codebase, and the other ones that aren’t included in Pull Requests\nare just waiting for the OSM’s Data Working Group feedback, if their inclusion is really necessary.`}</p>\n    <h1 {...{\n      \"id\": \"conclusion\"\n    }}>{`Conclusion`}</h1>\n    <p>{` `}{` `}{` `}{` `}{`The first month of GsoC has been an extraordinary experience.\nI am acquiring a lot of knowledge in this short period of time. In addition,\nI also see it as an excellent opportunity to apply all the content seen in the\nsubjects of the college. Stay tuned for the second evaluation post. See y’all!`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"wiki-solution\",\n    level: 2,\n    title: \"Wiki solution\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"git-solution\",\n    level: 2,\n    title: \"Git solution\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}